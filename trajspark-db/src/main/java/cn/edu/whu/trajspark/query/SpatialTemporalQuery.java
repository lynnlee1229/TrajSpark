package cn.edu.whu.trajspark.query;

import cn.edu.whu.trajspark.core.common.trajectory.Trajectory;
import cn.edu.whu.trajspark.database.meta.IndexMeta;
import cn.edu.whu.trajspark.database.table.DataTable;
import cn.edu.whu.trajspark.datatypes.TemporalQueryType;
import cn.edu.whu.trajspark.datatypes.TimeLine;
import cn.edu.whu.trajspark.index.IndexType;
import cn.edu.whu.trajspark.index.RowKeyRange;
import cn.edu.whu.trajspark.query.condition.SpatialQueryCondition;
import cn.edu.whu.trajspark.query.condition.SpatialTemporalQueryCondition;
import cn.edu.whu.trajspark.query.condition.TemporalQueryCondition;
import cn.edu.whu.trajspark.query.coprocessor.CoprocessorQuery;
import cn.edu.whu.trajspark.query.coprocessor.autogenerated.QueryCondition.QueryRequest;
import cn.edu.whu.trajspark.query.coprocessor.autogenerated.QueryCondition.QueryType;
import cn.edu.whu.trajspark.query.coprocessor.autogenerated.QueryCondition.Range;
import cn.edu.whu.trajspark.query.coprocessor.autogenerated.QueryCondition.SpatialQueryWindow;
import cn.edu.whu.trajspark.query.coprocessor.autogenerated.QueryCondition.TemporalQueryWindow;
import cn.edu.whu.trajspark.query.coprocessor.autogenerated.QueryCondition.TemporalQueryWindows;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @author Xu Qi
 * @since 2022/12/2
 */
public class SpatialTemporalQuery extends AbstractQuery {

  private SpatialTemporalQueryCondition spatialTemporalQueryCondition;
  private IndexType indexType;

  public SpatialTemporalQuery(DataTable dataTable,
      SpatialTemporalQueryCondition spatialTemporalQueryCondition, IndexType indexType) {
    super(dataTable);
    this.spatialTemporalQueryCondition = spatialTemporalQueryCondition;
    this.indexType = indexType;
  }

  @Override
  public List<RowKeyRange> getIndexRanges() {
    IndexMeta indexMeta = findBestIndex();
    return indexMeta.getIndexStrategy().getScanRanges(spatialTemporalQueryCondition);
  }

  @Override
  public List<Trajectory> executeQuery() throws IOException {
    List<RowKeyRange> rowKeyRanges = getIndexRanges();
    return executeQuery(rowKeyRanges);
  }

  @Override
  public List<Trajectory> executeQuery(List<RowKeyRange> rowKeyRanges) throws IOException {
    List<Range> ranges = rowKeyRangeToProtoRange(rowKeyRanges);
    SpatialQueryCondition spatialQueryCondition = spatialTemporalQueryCondition.getSpatialQueryCondition();
    TemporalQueryCondition temporalQueryCondition = spatialTemporalQueryCondition.getTemporalQueryCondition();
    List<TemporalQueryWindow> temporalQueryWindows = new ArrayList<>();
    if (temporalQueryCondition.getQueryWindows() == null) {
      TemporalQueryWindow window = TemporalQueryWindow.newBuilder()
          .setStartMs(temporalQueryCondition.getQueryWindow().getTimeStart().toEpochSecond())
          .setEndMs(temporalQueryCondition.getQueryWindow().getTimeEnd().toEpochSecond()).build();
      temporalQueryWindows.add(window);
    } else {
      for (TimeLine queryWindow : temporalQueryCondition.getQueryWindows()) {
        TemporalQueryWindow temporalQueryWindow = TemporalQueryWindow.newBuilder()
            .setStartMs(queryWindow.getTimeStart().toEpochSecond())
            .setEndMs(queryWindow.getTimeEnd().toEpochSecond()).build();
        temporalQueryWindows.add(temporalQueryWindow);
      }
    }
    QueryRequest spatialTemporalQueryRequest = QueryRequest.newBuilder()
        .setSpatialQueryType(
            spatialQueryCondition.getQueryType() == SpatialQueryCondition.SpatialQueryType.CONTAIN
                ? QueryType.CONTAIN : QueryType.INTERSECT)
        .setSpatialQueryWindow(
            SpatialQueryWindow.newBuilder().setWkt(spatialQueryCondition.getQueryWindowWKT()))
        .setTemporalQueryType(
            temporalQueryCondition.getTemporalQueryType() == TemporalQueryType.CONTAIN
                ? QueryType.CONTAIN : QueryType.INTERSECT)
        .setTemporalQueryWindows(
            TemporalQueryWindows.newBuilder().addAllTemporalQueryWindow(temporalQueryWindows)
                .build())
        .addAllRange(ranges).build();

    return CoprocessorQuery.executeQuery(dataTable, spatialTemporalQueryRequest);
  }

  @Override
  public IndexMeta findBestIndex() {
    Map<IndexType, IndexMeta> map = getAvailableIndexes();
    // find a spatial index
    if (indexType == IndexType.TXZ2) {
      if (map.containsKey(IndexType.TXZ2)) {
        return map.get(IndexType.TXZ2);
      }
    } else if (indexType == IndexType.XZ2T) {
      if (map.containsKey(IndexType.XZ2T)) {
        return map.get(IndexType.XZ2T);
      }
    }
    // no spatial index so we will do a full table scan, we select a main index.
    for (Map.Entry<IndexType, IndexMeta> entry : map.entrySet()) {
      if (entry.getValue().isMainIndex()) {
        return entry.getValue();
      }
    }
    return null;
  }
}
