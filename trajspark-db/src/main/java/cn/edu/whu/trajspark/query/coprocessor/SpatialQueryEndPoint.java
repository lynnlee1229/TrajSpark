package cn.edu.whu.trajspark.query.coprocessor;

import cn.edu.whu.trajspark.core.common.trajectory.TrajFeatures;
import cn.edu.whu.trajspark.database.util.TrajectorySerdeUtils;
import cn.edu.whu.trajspark.query.coprocessor.autogenerated.BasicSTQueryCoprocessor.*;
import org.apache.hadoop.hbase.client.Result;
import org.apache.hadoop.hbase.client.Scan;
import org.locationtech.jts.geom.Geometry;
import org.locationtech.jts.io.ParseException;
import org.locationtech.jts.io.WKTReader;

import java.io.IOException;

import static cn.edu.whu.trajspark.database.util.TrajectorySerdeUtils.*;

/**
 * @author Haocheng Wang
 * Created on 2022/10/28
 */
public class SpatialQueryEndPoint extends AbstractSTQueryEndPoint{
  @Override
  protected Scan getScanWithColumns(QueryRequest request) {
    Scan scan = new Scan();
    // mbr, signature, point list, ptr
    scan.addColumn(COLUMN_FAMILY, MBR_QUALIFIER);
    scan.addColumn(COLUMN_FAMILY, OBJECT_ID_QUALIFIER);
    scan.addColumn(COLUMN_FAMILY, SIGNATURE_QUALIFIER);
    scan.addColumn(COLUMN_FAMILY, TRAJ_POINTS_QUALIFIER);
    scan.addColumn(COLUMN_FAMILY, PTR_QUALIFIER);
    return scan;
  }

  @Override
  protected boolean coarseFilter(Result result, QueryRequest queryRequest) {
    WKTReader wktReader = new WKTReader();
    boolean validate = true;
    try {
      Geometry queryGeom = wktReader.read(queryRequest.getSpatialQueryWindow().getWkt());
      TrajFeatures trajectoryFeature = TrajectorySerdeUtils.getTrajectoryFeatures(result);
      if (queryRequest.getSpatialQueryType() == QueryType.CONTAIN) {
        validate &= queryGeom.contains(trajectoryFeature.getMbr().toPolygon(4326));
      } else {
        validate &= queryGeom.intersects(trajectoryFeature.getMbr().toPolygon(4326));
      }
      // TODO : filter with signature.
      if (result.getValue(COLUMN_FAMILY, SIGNATURE_QUALIFIER) != null) {
      }
    } catch (ParseException | IOException e) {
      e.printStackTrace();
    }
    return validate;
  }

  @Override
  protected boolean fineFilter(Result result, QueryRequest queryRequest) throws IOException {
    return spatialFineFilter(result, queryRequest);
  }
}
