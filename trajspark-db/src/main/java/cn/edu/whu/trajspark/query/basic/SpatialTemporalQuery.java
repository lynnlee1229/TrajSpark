package cn.edu.whu.trajspark.query.basic;

import cn.edu.whu.trajspark.base.trajectory.Trajectory;
import cn.edu.whu.trajspark.database.DataSet;
import cn.edu.whu.trajspark.database.meta.IndexMeta;
import cn.edu.whu.trajspark.database.table.IndexTable;
import cn.edu.whu.trajspark.datatypes.TemporalQueryType;
import cn.edu.whu.trajspark.index.IndexType;
import cn.edu.whu.trajspark.index.RowKeyRange;
import cn.edu.whu.trajspark.query.condition.SpatialQueryCondition;
import cn.edu.whu.trajspark.query.condition.SpatialTemporalQueryCondition;
import cn.edu.whu.trajspark.query.condition.TemporalQueryCondition;
import cn.edu.whu.trajspark.query.coprocessor.STCoprocessorQuery;
import cn.edu.whu.trajspark.query.coprocessor.autogenerated.QueryCondition;

import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * @author Xu Qi
 * @since 2022/12/2
 */
public class SpatialTemporalQuery extends AbstractQuery {

  private SpatialTemporalQueryCondition spatialTemporalQueryCondition;

  public SpatialTemporalQuery(DataSet dataSet,
                              SpatialTemporalQueryCondition spatialTemporalQueryCondition) throws IOException {
    super(dataSet);
    this.spatialTemporalQueryCondition = spatialTemporalQueryCondition;
  }

  public SpatialTemporalQuery(IndexTable indexTable,
                              SpatialTemporalQueryCondition spatialTemporalQueryCondition) throws IOException {
    super(indexTable);
    this.spatialTemporalQueryCondition = spatialTemporalQueryCondition;
  }

  @Override
  public List<RowKeyRange> getIndexRanges() throws IOException {
    setupTargetIndexTable();
    return targetIndexTable.getIndexMeta().getIndexStrategy().getScanRanges(spatialTemporalQueryCondition);
  }

  @Override
  public List<Trajectory> executeQuery() throws IOException {
    List<RowKeyRange> rowKeyRanges = getIndexRanges();
    return executeQuery(rowKeyRanges);
  }

  @Override
  public List<Trajectory> executeQuery(List<RowKeyRange> rowKeyRanges) throws IOException {
    List<QueryCondition.Range> ranges = rowKeyRangeToProtoRange(rowKeyRanges);
    SpatialQueryCondition spatialQueryCondition = spatialTemporalQueryCondition.getSpatialQueryCondition();
    TemporalQueryCondition temporalQueryCondition = spatialTemporalQueryCondition.getTemporalQueryCondition();
    List<QueryCondition.TemporalQueryWindow> temporalQueryWindows = IDTemporalQuery.buildProtoTemporalWindows(temporalQueryCondition);
    QueryCondition.QueryRequest spatialTemporalQueryRequest = QueryCondition.QueryRequest.newBuilder()
        .setSpatialQueryType(
            spatialQueryCondition.getQueryType() == SpatialQueryCondition.SpatialQueryType.CONTAIN
                ? QueryCondition.QueryType.CONTAIN : QueryCondition.QueryType.INTERSECT)
        .setSpatialQueryWindow(
            QueryCondition.SpatialQueryWindow.newBuilder().setWkt(spatialQueryCondition.getQueryWindowWKT()))
        .setTemporalQueryType(
            temporalQueryCondition.getTemporalQueryType() == TemporalQueryType.CONTAIN
                ? QueryCondition.QueryType.CONTAIN : QueryCondition.QueryType.INTERSECT)
        .setTemporalQueryWindows(
            QueryCondition.TemporalQueryWindows.newBuilder().addAllTemporalQueryWindow(temporalQueryWindows)
                .build())
        .addAllRange(ranges).build();

    return STCoprocessorQuery.executeQuery(targetIndexTable, spatialTemporalQueryRequest);
  }

  @Override
  public IndexMeta findBestIndex() {
    Map<IndexType, List<IndexMeta>> map = dataSet.getDataSetMeta().getAvailableIndexes();
    // find a st index
    List<IndexMeta> spatialIndexList = null;
    if (map.containsKey(IndexType.TXZ2)) {
      spatialIndexList = map.get(IndexType.TXZ2);
    } else if (map.containsKey(IndexType.XZ2T)) {
      spatialIndexList = map.get(IndexType.XZ2T);
    }
    if (spatialIndexList != null) {
      return IndexMeta.getBestIndexMeta(spatialIndexList);
    }
    // TODO: 直接抛异常，禁止全表扫描
    // no st index so we will do a full table scan, we select a main index.
    return dataSet.getDataSetMeta().getCoreIndexMeta();
  }

  @Override
  public String getQueryInfo() {
    return null;
  }
}
