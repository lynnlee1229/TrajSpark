package cn.edu.whu.trajspark.query.coprocessor;

import cn.edu.whu.trajspark.base.trajectory.Trajectory;
import cn.edu.whu.trajspark.database.table.IndexTable;
import cn.edu.whu.trajspark.database.util.TrajectorySerdeUtils;
import cn.edu.whu.trajspark.query.coprocessor.autogenerated.QueryCondition;
import com.google.protobuf.RpcCallback;
import org.apache.hadoop.hbase.client.coprocessor.Batch;
import org.apache.hadoop.hbase.ipc.CoprocessorRpcUtils;
import org.apache.hadoop.hbase.ipc.ServerRpcController;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @author Haocheng Wang
 * Created on 2022/11/15
 */
public class STCoprocessorQuery {

  public static List<Trajectory> executeQuery(IndexTable indexTable, QueryCondition.QueryRequest request) throws IOException {
    List<QueryCondition.Range> ranges = request.getRangeList();

    Map<byte[], List<QueryCondition.TrajectoryResult>> coprocessorResult = null;
    try {
      coprocessorResult = indexTable.getTable().coprocessorService(QueryCondition.QueryService.class,
          ranges.get(0).getStart().toByteArray(), ranges.get(ranges.size() - 1).getEnd().toByteArray(),
          new Batch.Call<QueryCondition.QueryService, List<QueryCondition.TrajectoryResult>>() {
            @Override
            public List<QueryCondition.TrajectoryResult> call(QueryCondition.QueryService queryService) throws IOException {
              // BlockingRpcCallback<QueryCondition.QueryResponse> rpcCallback = new BlockingRpcCallback();
              CoprocessorRpcUtils.BlockingRpcCallback rpcCallback = new CoprocessorRpcUtils.BlockingRpcCallback<QueryCondition.QueryResponse>();
              queryService.query(new ServerRpcController(), request, (RpcCallback) rpcCallback);
              QueryCondition.QueryResponse response = (QueryCondition.QueryResponse) rpcCallback.get();
              return response.getListList();
            }
          });
    } catch (Throwable e) {
      e.printStackTrace();
    }

    List<Trajectory> result = new ArrayList<>();
    for (List<QueryCondition.TrajectoryResult> trajectoryResultList : coprocessorResult.values()) {
      for (QueryCondition.TrajectoryResult tr : trajectoryResultList) {
        Trajectory trajectory = TrajectorySerdeUtils.protoResultToTrajectory(tr);
        result.add(trajectory);
      }
    }
    return result;
  }

}
