package cn.edu.whu.trajspark.query;

import cn.edu.whu.trajspark.base.trajectory.Trajectory;
import cn.edu.whu.trajspark.index.RowKeyRange;
import cn.edu.whu.trajspark.database.meta.IndexMeta;
import cn.edu.whu.trajspark.database.table.DataTable;
import cn.edu.whu.trajspark.index.IndexType;
import cn.edu.whu.trajspark.query.condition.SpatialQueryCondition;
import cn.edu.whu.trajspark.query.coprocessor.CoprocessorQuery;

import cn.edu.whu.trajspark.query.coprocessor.autogenerated.QueryCondition.*;
import java.io.IOException;
import java.util.*;

/**
 * @author Haocheng Wang
 * Created on 2022/10/27
 */
public class SpatialQuery extends AbstractQuery {

  SpatialQueryCondition spatialQueryCondition;

  public SpatialQuery(DataTable targetTable, SpatialQueryCondition spatialQueryCondition) {
    super(targetTable);
    this.spatialQueryCondition = spatialQueryCondition;
  }

  @Override
  public List<RowKeyRange> getIndexRanges() {
    IndexMeta indexMeta = findBestIndex();
    return indexMeta.getIndexStrategy().getScanRanges(spatialQueryCondition);
  }

  @Override
  public List<Trajectory> executeQuery() throws IOException {
    List<RowKeyRange> rowKeyRanges = getIndexRanges();
    return executeQuery(rowKeyRanges);
  }

  @Override
  public List<Trajectory> executeQuery(List<RowKeyRange> rowKeyRanges) throws IOException {
    List<Range> ranges = rowKeyRangeToProtoRange(rowKeyRanges);

    QueryRequest spatialQueryRequest = QueryRequest.newBuilder()
        .setSpatialQueryType(spatialQueryCondition.getQueryType() == SpatialQueryCondition.SpatialQueryType.CONTAIN ? QueryType.CONTAIN : QueryType.INTERSECT)
        .setSpatialQueryWindow(SpatialQueryWindow.newBuilder().setWkt(spatialQueryCondition.getQueryWindowWKT()))
        .addAllRange(ranges).build();

    return CoprocessorQuery.executeQuery(dataTable, spatialQueryRequest);
  }

  @Override
  public IndexMeta findBestIndex() {
    Map<IndexType, IndexMeta> map = getAvailableIndexes();
    // find a spatial index
    if (map.containsKey(IndexType.XZ2)) {
      return map.get(IndexType.XZ2);
    } else if (map.containsKey(IndexType.XZ2T)) {
      return map.get(IndexType.XZ2);
    } else if (map.containsKey(IndexType.XZ2Plus)) {
      return map.get(IndexType.XZ2Plus);
    }
    // no spatial index so we will do a full table scan, we select a main index.
    for (Map.Entry<IndexType, IndexMeta> entry : map.entrySet()) {
      if (entry.getValue().isMainIndex()) {
        return entry.getValue();
      }
    }
    return null;
  }
}
