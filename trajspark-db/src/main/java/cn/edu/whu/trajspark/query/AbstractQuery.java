package cn.edu.whu.trajspark.query;

import cn.edu.whu.trajspark.core.common.trajectory.Trajectory;
import cn.edu.whu.trajspark.database.meta.DataSetMeta;
import cn.edu.whu.trajspark.database.meta.IndexMeta;
import cn.edu.whu.trajspark.database.table.DataTable;
import cn.edu.whu.trajspark.datatypes.ByteArray;
import cn.edu.whu.trajspark.index.RowKeyRange;
import cn.edu.whu.trajspark.index.IndexType;
import cn.edu.whu.trajspark.query.coprocessor.autogenerated.QueryCondition;
import com.google.protobuf.ByteString;

import java.io.IOException;
import java.util.*;

/**
 * @author Haocheng Wang
 * Created on 2022/9/28
 */
public abstract class AbstractQuery {
  DataTable dataTable;

  public AbstractQuery(DataTable dataTable) {
    this.dataTable = dataTable;
  }

  /**
   * 基于查询条件与目标表, 获取要查询的row-key范围.
   * @return
   */
  public abstract List<RowKeyRange> getIndexRanges();

  /**
   * Query <strong>all</strong> ranges that meets query request on target table.
   * @return
   */
  public abstract List<Trajectory> executeQuery() throws IOException;

  /**
   * Query <strong>some</strong> ranges on target table.
   * @return
   */
  public abstract List<Trajectory> executeQuery(List<RowKeyRange> range) throws IOException;

  public abstract IndexMeta findBestIndex();

  protected Map<IndexType, IndexMeta> getAvailableIndexes() {
    DataSetMeta dataSetMeta = dataTable.getDataSetMeta();
    List<IndexMeta> indexMetaList = dataSetMeta.getIndexMetaList();
    HashMap<IndexType, IndexMeta> map = new HashMap<>();
    for (IndexMeta indexMeta : indexMetaList) {
      map.put(indexMeta.getIndexStrategy().getIndexType(), indexMeta);
    }
    return map;
  }

  /**
   * 类型转换 + 排序
   */
  protected List<QueryCondition.Range> rowKeyRangeToProtoRange(List<RowKeyRange> rowKeyRanges) {
    List<QueryCondition.Range> ranges = new ArrayList<>();
    for (RowKeyRange rowKeyRange : rowKeyRanges) {
      QueryCondition.Range r = QueryCondition.Range.newBuilder()
          .setStart(ByteString.copyFrom(rowKeyRange.getStartKey().getBytes()))
          .setEnd(ByteString.copyFrom(rowKeyRange.getEndKey().getBytes()))
          .setContained(rowKeyRange.isContained())
          .build();
      ranges.add(r);
    }

    ranges.sort((o1, o2) -> {
      ByteArray o1Start = new ByteArray(o1.getStart().toByteArray());
      ByteArray o2Start = new ByteArray(o2.getStart().toByteArray());
      ByteArray o1End = new ByteArray(o1.getEnd().toByteArray());
      ByteArray o2End = new ByteArray(o2.getEnd().toByteArray());
      return o1Start.compareTo(o2Start) == 0 ? o1End.compareTo(o2End) : o1Start.compareTo(o2Start);
    });
    return ranges;
  }
}
